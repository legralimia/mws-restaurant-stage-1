{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/sw.js"],"names":[],"mappings":"AAAA;;;ACAA,IAAI,eAAe,GAAC,aAApB;AAEA,IAAI,CAAC,gBAAL,CAAsB,SAAtB,EAAiC,UAAU,KAAV,EAAiB;AAC9C,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,IAA7B,CAAkC,UAAA,KAAK,EAAG;AACxD,WAAO,KAAK,CAAC,MAAN,CAAa,CAChB,GADgB,EAEhB,aAFgB,EAGhB,kBAHgB,EAIhB,wBAJgB,EAKhB,MALgB,EAMhB,aANgB,EAOhB,uBAPgB,EAQf,iBARe,EASf,OATe,CAAb,EAUL,KAVK,CAUC,UAAA,KAAK,EAAE;AACb,MAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ;AACF,KAZO,CAAP;AAaD,GAde,CAAhB;AAeD,CAhBH;AAmBE,IAAI,CAAC,gBAAL,CAAsB,OAAtB,EAA+B,UAAS,KAAT,EAAgB;AAC7C,EAAA,KAAK,CAAC,WAAN,CACE,MAAM,CAAC,KAAP,CAAa,KAAK,CAAC,OAAnB,EACG,IADH,CACQ,UAAS,QAAT,EAAmB;AACvB;AACA,QAAI,QAAJ,EAAc;AACZ,aAAO,QAAP;AACD;;AACD,QAAG,KAAK,CAAC,OAAN,KAAgB,WAAnB,EAA+B;AAC7B,MAAA,KAAK,CAAC,OAAN,CAAc,IAAd,GAAmB,SAAnB;AACD;;AAED,QAAI,YAAY,GAAG,KAAK,CAAC,OAAN,CAAc,KAAd,EAAnB;AACA,QAAG,YAAY,CAAC,GAAb,CAAiB,QAAjB,CAA0B,YAA1B,CAAH,EACA,YAAY,GAAC,IAAI,OAAJ,CAAY,iBAAZ,CAAb;AAEA,WAAO,KAAK,CAAC,YAAD,CAAL,CAAoB,IAApB,CACL,UAAS,QAAT,EAAmB;AACjB;AACA,UAAG,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,GAAjC,IAAwC,QAAQ,CAAC,IAAT,KAAkB,OAA7D,EAAsE;AACpE,eAAO,QAAP;AACD;;AAGD,UAAI,eAAe,GAAG,QAAQ,CAAC,KAAT,EAAtB;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,eAAZ,EACG,IADH,CACQ,UAAS,KAAT,EAAgB;AACpB,QAAA,KAAK,CAAC,GAAN,CAAU,KAAK,CAAC,OAAhB,EAAyB,eAAzB;AACD,OAHH;AAKA,aAAO,QAAP;AACD,KAhBI,EAiBL,KAjBK,CAiBC,UAAS,KAAT,EAAe;AACrB,aAAO,IAAI,QAAJ,CAAa,sBAAb,EAAoC;AAAC,QAAA,MAAM,EAAC,GAAR;AAAY,QAAA,UAAU,EAAC;AAAvB,OAApC,CAAP;AACD,KAnBM,CAAP;AAoBD,GAlCH,CADF;AAqCD,CAtCD","file":"sw.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","var staticCacheName=\"restaurant1\"\r\n\r\nself.addEventListener('install', function (event) {\r\n    event.waitUntil(caches.open(staticCacheName).then(cache=> {\r\n      return cache.addAll([\r\n          '/', \r\n          '/index.html',\r\n          '/restaurant.html',          \r\n          '/data/restaurants.json',\r\n          '/js/',\r\n          '/js/main.js',         \r\n          '/js/retaurant_info.js',         \r\n           '/css/styles.css',\r\n           '/img/'\r\n     ]).catch(error=>{\r\n        console.log(\"Error retrieving cache\");\r\n     });\r\n    }));\r\n  });\r\n\r\n\r\n  self.addEventListener('fetch', function(event) {\r\n    event.respondWith(\r\n      caches.match(event.request)\r\n        .then(function(response) {\r\n          // Cache hit - return response\r\n          if (response) {\r\n            return response;\r\n          }\r\n          if(event.request!==\"localhost\"){\r\n            event.request.mode=\"no-cors\";\r\n          }\r\n         \r\n          var fetchRequest = event.request.clone();\r\n          if(fetchRequest.url.includes(\"restaurant\"))\r\n          fetchRequest=new Request(\"restaurant.html\");\r\n  \r\n          return fetch(fetchRequest).then(\r\n            function(response) {\r\n              // Check if we received a valid response\r\n              if(!response || response.status !== 200 || response.type !== 'basic') {\r\n                return response;\r\n              }\r\n  \r\n              \r\n              var responseToCache = response.clone();\r\n  \r\n              caches.open(staticCacheName)\r\n                .then(function(cache) {\r\n                  cache.put(event.request, responseToCache);\r\n                });\r\n  \r\n              return response;\r\n            }\r\n          ).catch(function(error){\r\n            return new Response(\"App is not connected\",{status:404,statusText:\"not connected\"})\r\n          });\r\n        })\r\n      );\r\n  });\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksZUFBZSxHQUFDLGFBQXBCO0FBRUEsSUFBSSxDQUFDLGdCQUFMLENBQXNCLFNBQXRCLEVBQWlDLFVBQVUsS0FBVixFQUFpQjtBQUM5QyxFQUFBLEtBQUssQ0FBQyxTQUFOLENBQWdCLE1BQU0sQ0FBQyxJQUFQLENBQVksZUFBWixFQUE2QixJQUE3QixDQUFrQyxVQUFBLEtBQUssRUFBRztBQUN4RCxXQUFPLEtBQUssQ0FBQyxNQUFOLENBQWEsQ0FDaEIsR0FEZ0IsRUFFaEIsYUFGZ0IsRUFHaEIsa0JBSGdCLEVBSWhCLHdCQUpnQixFQUtoQixNQUxnQixFQU1oQixhQU5nQixFQU9oQix1QkFQZ0IsRUFRZixpQkFSZSxFQVNmLE9BVGUsQ0FBYixFQVVMLEtBVkssQ0FVQyxVQUFBLEtBQUssRUFBRTtBQUNiLE1BQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSx3QkFBWjtBQUNGLEtBWk8sQ0FBUDtBQWFELEdBZGUsQ0FBaEI7QUFlRCxDQWhCSDtBQW1CRSxJQUFJLENBQUMsZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0IsVUFBUyxLQUFULEVBQWdCO0FBQzdDLEVBQUEsS0FBSyxDQUFDLFdBQU4sQ0FDRSxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQUssQ0FBQyxPQUFuQixFQUNHLElBREgsQ0FDUSxVQUFTLFFBQVQsRUFBbUI7QUFDdkI7QUFDQSxRQUFJLFFBQUosRUFBYztBQUNaLGFBQU8sUUFBUDtBQUNEOztBQUNELFFBQUcsS0FBSyxDQUFDLE9BQU4sS0FBZ0IsV0FBbkIsRUFBK0I7QUFDN0IsTUFBQSxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsR0FBbUIsU0FBbkI7QUFDRDs7QUFFRCxRQUFJLFlBQVksR0FBRyxLQUFLLENBQUMsT0FBTixDQUFjLEtBQWQsRUFBbkI7QUFDQSxRQUFHLFlBQVksQ0FBQyxHQUFiLENBQWlCLFFBQWpCLENBQTBCLFlBQTFCLENBQUgsRUFDQSxZQUFZLEdBQUMsSUFBSSxPQUFKLENBQVksaUJBQVosQ0FBYjtBQUVBLFdBQU8sS0FBSyxDQUFDLFlBQUQsQ0FBTCxDQUFvQixJQUFwQixDQUNMLFVBQVMsUUFBVCxFQUFtQjtBQUNqQjtBQUNBLFVBQUcsQ0FBQyxRQUFELElBQWEsUUFBUSxDQUFDLE1BQVQsS0FBb0IsR0FBakMsSUFBd0MsUUFBUSxDQUFDLElBQVQsS0FBa0IsT0FBN0QsRUFBc0U7QUFDcEUsZUFBTyxRQUFQO0FBQ0Q7O0FBR0QsVUFBSSxlQUFlLEdBQUcsUUFBUSxDQUFDLEtBQVQsRUFBdEI7QUFFQSxNQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksZUFBWixFQUNHLElBREgsQ0FDUSxVQUFTLEtBQVQsRUFBZ0I7QUFDcEIsUUFBQSxLQUFLLENBQUMsR0FBTixDQUFVLEtBQUssQ0FBQyxPQUFoQixFQUF5QixlQUF6QjtBQUNELE9BSEg7QUFLQSxhQUFPLFFBQVA7QUFDRCxLQWhCSSxFQWlCTCxLQWpCSyxDQWlCQyxVQUFTLEtBQVQsRUFBZTtBQUNyQixhQUFPLElBQUksUUFBSixDQUFhLHNCQUFiLEVBQW9DO0FBQUMsUUFBQSxNQUFNLEVBQUMsR0FBUjtBQUFZLFFBQUEsVUFBVSxFQUFDO0FBQXZCLE9BQXBDLENBQVA7QUFDRCxLQW5CTSxDQUFQO0FBb0JELEdBbENILENBREY7QUFxQ0QsQ0F0Q0QiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJ2YXIgc3RhdGljQ2FjaGVOYW1lPVwicmVzdGF1cmFudDFcIlxyXG5cclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBldmVudC53YWl0VW50aWwoY2FjaGVzLm9wZW4oc3RhdGljQ2FjaGVOYW1lKS50aGVuKGNhY2hlPT4ge1xyXG4gICAgICByZXR1cm4gY2FjaGUuYWRkQWxsKFtcclxuICAgICAgICAgICcvJywgXHJcbiAgICAgICAgICAnL2luZGV4Lmh0bWwnLFxyXG4gICAgICAgICAgJy9yZXN0YXVyYW50Lmh0bWwnLCAgICAgICAgICBcclxuICAgICAgICAgICcvZGF0YS9yZXN0YXVyYW50cy5qc29uJyxcclxuICAgICAgICAgICcvanMvJyxcclxuICAgICAgICAgICcvanMvbWFpbi5qcycsICAgICAgICAgXHJcbiAgICAgICAgICAnL2pzL3JldGF1cmFudF9pbmZvLmpzJywgICAgICAgICBcclxuICAgICAgICAgICAnL2Nzcy9zdHlsZXMuY3NzJyxcclxuICAgICAgICAgICAnL2ltZy8nXHJcbiAgICAgXSkuY2F0Y2goZXJyb3I9PntcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIHJldHJpZXZpbmcgY2FjaGVcIik7XHJcbiAgICAgfSk7XHJcbiAgICB9KSk7XHJcbiAgfSk7XHJcblxyXG5cclxuICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2ZldGNoJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIGV2ZW50LnJlc3BvbmRXaXRoKFxyXG4gICAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgLy8gQ2FjaGUgaGl0IC0gcmV0dXJuIHJlc3BvbnNlXHJcbiAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoZXZlbnQucmVxdWVzdCE9PVwibG9jYWxob3N0XCIpe1xyXG4gICAgICAgICAgICBldmVudC5yZXF1ZXN0Lm1vZGU9XCJuby1jb3JzXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGZldGNoUmVxdWVzdCA9IGV2ZW50LnJlcXVlc3QuY2xvbmUoKTtcclxuICAgICAgICAgIGlmKGZldGNoUmVxdWVzdC51cmwuaW5jbHVkZXMoXCJyZXN0YXVyYW50XCIpKVxyXG4gICAgICAgICAgZmV0Y2hSZXF1ZXN0PW5ldyBSZXF1ZXN0KFwicmVzdGF1cmFudC5odG1sXCIpO1xyXG4gIFxyXG4gICAgICAgICAgcmV0dXJuIGZldGNoKGZldGNoUmVxdWVzdCkudGhlbihcclxuICAgICAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSByZWNlaXZlZCBhIHZhbGlkIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgaWYoIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwIHx8IHJlc3BvbnNlLnR5cGUgIT09ICdiYXNpYycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlVG9DYWNoZSA9IHJlc3BvbnNlLmNsb25lKCk7XHJcbiAgXHJcbiAgICAgICAgICAgICAgY2FjaGVzLm9wZW4oc3RhdGljQ2FjaGVOYW1lKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY2FjaGUpIHtcclxuICAgICAgICAgICAgICAgICAgY2FjaGUucHV0KGV2ZW50LnJlcXVlc3QsIHJlc3BvbnNlVG9DYWNoZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICBcclxuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICkuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiQXBwIGlzIG5vdCBjb25uZWN0ZWRcIix7c3RhdHVzOjQwNCxzdGF0dXNUZXh0Olwibm90IGNvbm5lY3RlZFwifSlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgfSk7XHJcbiJdfQ=="}